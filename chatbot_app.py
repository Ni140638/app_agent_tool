import streamlit as st
import openai

openai.api_key = st.secrets["OPENAI_API_KEY"]

# ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏ä‡∏∑‡πà‡∏≠‡πÅ‡∏ó‡πá‡∏ö
tabs = st.tabs(["üíµ Assest Allocation", "üöó Motorinsurance", "üí≥ Credit card"])

# ‡πÄ‡∏Å‡πá‡∏ö state ‡πÅ‡∏¢‡∏Å‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏ö‡∏≠‡∏ó
if "messages_bot1" not in st.session_state:
    st.session_state["messages_bot1"] = []

if "messages_bot2" not in st.session_state:
    st.session_state["messages_bot2"] = []

if "messages_bot3" not in st.session_state:
    st.session_state["messages_bot3"] = []

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ñ‡∏≤‡∏°‡∏ö‡∏≠‡∏ó
def ask_openai(messages, system_prompt):
    full_messages = [{"role": "system", "content": system_prompt}] + messages
    response = openai.ChatCompletion.create(
        model="gpt-3.5-turbo",
        messages=full_messages
    )
    return response.choices[0].message["content"]

# üíµ Tab 1 ‚Äì GPT-3.5 ‡∏õ‡∏Å‡∏ï‡∏¥
with tabs[0]:
    st.subheader("üíµ Assest Allocation")
    for msg in st.session_state["messages_bot1"]:
        with st.chat_message(msg["role"]):
            st.markdown(msg["content"])

    if prompt := st.chat_input("‡∏û‡∏¥‡∏°‡∏û‡πå‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°... ", key="input1"):
        st.session_state["messages_bot1"].append({"role": "user", "content": prompt})
        with st.chat_message("user"):
            st.markdown(prompt)

        reply = ask_openai(st.session_state["messages_bot1"], "‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡∏∑‡∏≠ AI ‡∏≠‡∏±‡∏à‡∏â‡∏£‡∏¥‡∏¢‡∏∞‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ")
        st.chat_message("assistant").markdown(reply)
        st.session_state["messages_bot1"].append({"role": "assistant", "content": reply})

# üöó Tab 2 ‚Äì Bot Tutor
with tabs[1]:
    st.subheader("üöó Motorinsurance")
    for msg in st.session_state["messages_bot2"]:
        with st.chat_message(msg["role"]):
            st.markdown(msg["content"])

    if prompt := st.chat_input("‡∏ñ‡∏≤‡∏°‡πÄ‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°", key="input2"):
        st.session_state["messages_bot2"].append({"role": "user", "content": prompt})
        with st.chat_message("user"):
            st.markdown(prompt)

        reply = ask_openai(st.session_state["messages_bot2"], "‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡∏∑‡∏≠‡∏Ñ‡∏£‡∏π‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡∏á‡πà‡∏≤‡∏¢ ‡πÉ‡∏ä‡πâ‡∏†‡∏≤‡∏©‡∏≤‡∏Ñ‡∏ô‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ")
        st.chat_message("assistant").markdown(reply)
        st.session_state["messages_bot2"].append({"role": "assistant", "content": reply})

# üí≥ Tab 3 ‚Äì Bot Assistant
with tabs[2]:
    st.subheader("üí≥ Credit card")
    for msg in st.session_state["messages_bot3"]:
        with st.chat_message(msg["role"]):
            st.markdown(msg["content"])

    if prompt := st.chat_input("‡∏ñ‡∏≤‡∏°‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°", key="input3"):
        st.session_state["messages_bot3"].append({"role": "user", "content": prompt})
        with st.chat_message("user"):
            st.markdown(prompt)

        reply = ask_openai(st.session_state["messages_bot3"], "‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡∏∑‡∏≠‡πÄ‡∏•‡∏Ç‡∏≤‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß‡∏ó‡∏µ‡πà‡∏ä‡πà‡∏ß‡∏¢‡∏™‡∏£‡∏∏‡∏õ‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡∏∞‡∏ß‡∏≤‡∏á‡πÅ‡∏ú‡∏ô")
        st.chat_message("assistant").markdown(reply)
        st.session_state["messages_bot3"].append({"role": "assistant", "content": reply})

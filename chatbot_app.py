import streamlit as st
import openai

openai.api_key = st.secrets["OPENAI_API_KEY"]

# -------------------------------
# Inject custom CSS
# -------------------------------
st.markdown("""
    <style>
        .block-container {
            padding-top: 1rem;
            padding-bottom: 1rem;
        }
        .element-container {
            margin-bottom: 0.3rem;
        }
        button[kind="primary"] {
            margin-top: 0.3rem;
        }
        button {
            margin: 0.2rem 0 !important;
        }
    </style>
""", unsafe_allow_html=True)

# -------------------------------
# ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏° state
# -------------------------------
if "selected_topic" not in st.session_state:
    st.session_state["selected_topic"] = None
if "input_topic" not in st.session_state:
    st.session_state["input_topic"] = ""

for i in range(1, 4):
    st.session_state.setdefault(f"messages_bot{i}", [])
    st.session_state.setdefault(f"prefill_input_{i}", "")

# -------------------------------
# ‡πÇ‡∏´‡∏•‡∏î system prompt
# -------------------------------
with open("genai-mf-prompt-for-first-draft.txt", "r", encoding="utf-8") as f:
    prompt_mf = f.read()
with open("gen-ai-motor-first-draft.txt", "r", encoding="utf-8") as f:
    prompt_motor = f.read()
prompt_credit = "‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡∏∑‡∏≠‡πÄ‡∏•‡∏Ç‡∏≤‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß‡∏ó‡∏µ‡πà‡∏ä‡πà‡∏ß‡∏¢‡∏™‡∏£‡∏∏‡∏õ‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡∏∞‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏ö‡∏±‡∏ï‡∏£‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ä‡∏≤‡∏ç‡∏â‡∏•‡∏≤‡∏î"

# -------------------------------
# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏£‡∏µ‡∏¢‡∏Å OpenAI
# -------------------------------
def ask_openai(messages, system_prompt, max_history=10):
    full_messages = [{"role": "system", "content": system_prompt}] + messages[-max_history:]
    try:
        response = openai.ChatCompletion.create(
            model="gpt-4o",
            messages=full_messages
        )
        return response.choices[0].message["content"]
    except Exception as e:
        return f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {e}"

# -------------------------------
# STEP 1: ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠‡∏´‡∏•‡∏±‡∏Å
# -------------------------------
if st.session_state["selected_topic"] is None:
    st.chat_message("assistant").markdown(
        "‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ‡∏Ñ‡πà‡∏∞ üòä ‡∏Ñ‡∏∏‡∏ì‡∏≠‡∏¢‡∏≤‡∏Å‡∏™‡∏≠‡∏ö‡∏ñ‡∏≤‡∏°‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏≠‡∏∞‡πÑ‡∏£?\n\n"
        "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏û‡∏¥‡∏°‡∏û‡πå‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡∏™‡∏ô‡πÉ‡∏à ‡πÑ‡∏î‡πâ‡πÅ‡∏Å‡πà: `Asset Allocation`, `Motor Insurance`, ‡∏´‡∏£‡∏∑‡∏≠ `Credit card` ‡∏´‡∏≤‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠‡πÉ‡∏´‡πâ‡∏û‡∏¥‡∏°‡∏û‡πå‡∏ß‡πà‡∏≤ `‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠` ‡∏Ñ‡πà‡∏∞"
    )

    col1, col2, col3 = st.columns(3)
    with col1:
        if st.button("Asset Allocation"):
            st.session_state["input_topic"] = "Asset Allocation"
            st.rerun()
    with col2:
        if st.button("Motor Insurance"):
            st.session_state["input_topic"] = "Motor Insurance"
            st.rerun()
    with col3:
        if st.button("Credit card"):
            st.session_state["input_topic"] = "Credit Card"
            st.rerun()

    with st.form(key="topic_form"):
        input_topic = st.text_input("‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏û‡∏π‡∏î‡∏Ñ‡∏∏‡∏¢...", value=st.session_state["input_topic"])
        submitted = st.form_submit_button("‡∏™‡πà‡∏á")
        if submitted:
            topic = input_topic.strip().lower()
            topic_map = {
                "asset allocation": "asset",
                "asset": "asset",
                "motor insurance": "motor",
                "motor": "motor",
                "credit card": "credit",
                "credit": "credit"
            }
            if topic in topic_map:
                st.session_state["selected_topic"] = topic_map[topic]
                st.rerun()
            else:
                st.warning("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏û‡∏¥‡∏°‡∏û‡πå‡πÄ‡∏â‡∏û‡∏≤‡∏∞ asset allocation, motor insurance, ‡∏´‡∏£‡∏∑‡∏≠ credit card ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô‡∏ô‡∏∞‡∏Ñ‡∏∞")

# -------------------------------
# STEP 2: ‡πÅ‡∏™‡∏î‡∏á‡πÅ‡∏ä‡∏ó‡∏ï‡∏≤‡∏°‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠
# -------------------------------
def chat_tab(title, bot_index, system_prompt, preset_buttons):
    tabs = st.tabs([title])
    with tabs[0]:
        st.subheader(title)

        # ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏ô‡∏ó‡∏ô‡∏≤‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤
        for msg in st.session_state[f"messages_bot{bot_index}"]:
            with st.chat_message(msg["role"]):
                st.markdown(msg["content"])

        # ‡∏õ‡∏∏‡πà‡∏° preset ‚Üí prefill
        col1, col2, col3 = st.columns(3)
        for i, (col, text) in enumerate(zip((col1, col2, col3), preset_buttons)):
            if col.button(f"üìå {text}", key=f"btn{bot_index}_{i}"):
                st.session_state[f"prefill_input_{bot_index}"] = text
                st.rerun()

        # ‡∏Å‡∏•‡πà‡∏≠‡∏á‡πÅ‡∏ä‡∏ó
        cols = st.columns([10, 1])
        with cols[0]:
            user_input = st.text_input(
                "‡∏ñ‡∏≤‡∏°‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°...",
                value=st.session_state[f"prefill_input_{bot_index}"],
                key=f"text_input_{bot_index}",
                label_visibility="collapsed",
                placeholder="‡∏ñ‡∏≤‡∏°‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°..."
            )
        with cols[1]:
            send = st.button("‚û§", key=f"send_btn_{bot_index}")

        if send and user_input.strip():
            prompt = user_input.strip()
            st.session_state[f"prefill_input_{bot_index}"] = ""

            if prompt == "‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠":
                st.session_state[f"messages_bot{bot_index}"] = []
                st.session_state["selected_topic"] = None
                st.rerun()
            else:
                st.session_state[f"messages_bot{bot_index}"].append({"role": "user", "content": prompt})
                with st.chat_message("user"):
                    st.markdown(prompt)

                reply = ask_openai(st.session_state[f"messages_bot{bot_index}"], system_prompt)
                st.chat_message("assistant").markdown(reply)
                st.session_state[f"messages_bot{bot_index}"].append({"role": "assistant", "content": reply})
                st.rerun()

# -------------------------------
# STEP 3: ‡πÄ‡∏õ‡∏¥‡∏î‡πÅ‡∏ä‡∏ó‡∏ï‡∏≤‡∏°‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠
# -------------------------------
if st.session_state["selected_topic"] == "asset":
    chat_tab("üíµ Asset Allocation", 1, prompt_mf, [
        "‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏°‡∏µ‡πÄ‡∏á‡∏¥‡∏ô‡πÄ‡∏¢‡πá‡∏ô‡∏≠‡∏¢‡∏π‡πà‡∏Å‡∏µ‡πà‡∏ö‡∏≤‡∏ó ‡∏ß‡∏≤‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏ó‡πà‡∏≤‡πÑ‡∏£",
        "‡πÄ‡∏á‡∏¥‡∏ô‡πÄ‡∏¢‡πá‡∏ô‡∏Ç‡∏≠‡∏á‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ó‡∏≥‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÑ‡∏£‡πÑ‡∏î‡πâ‡∏ö‡πâ‡∏≤‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏ú‡∏•‡∏Å‡∏≥‡πÑ‡∏£‡∏á‡∏≠‡∏Å‡πÄ‡∏á‡∏¢",
        "‡∏ú‡∏•‡∏¥‡∏ï‡∏†‡∏±‡∏ì‡∏ë‡πå Portfolio ‡πÅ‡∏•‡∏∞ Matual Fund ‡∏ó‡∏µ‡πà‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏Ñ‡∏∑‡∏≠‡∏≠‡∏∞‡πÑ‡∏£"
    ])
elif st.session_state["selected_topic"] == "motor":
    chat_tab("üöó Motor Insurance", 2, prompt_motor, [
        "‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏ñ(‡∏õ‡∏µ/model/‡∏¢‡∏µ‡πà‡∏´‡πâ‡∏≠)",
        "VMI ‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏Å‡∏±‡∏ö‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏Ñ‡∏∑‡∏≠‡∏≠‡∏∞‡πÑ‡∏£",
        "‡∏ä‡πà‡∏≠‡∏á‡∏ó‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏à‡πà‡∏≤‡∏¢‡πÑ‡∏î‡πâ"
    ])
elif st.session_state["selected_topic"] == "credit":
    chat_tab("üí≥ Credit Card", 3, prompt_credit, [
        "‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏ñ‡∏∑‡∏≠‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡πÑ‡∏´‡∏ô status ‡∏Ç‡∏≠‡∏á‡∏ö‡∏±‡∏ï‡∏£‡πÄ‡∏õ‡πá‡∏ô‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÑ‡∏£",
        "‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏°‡∏µ Lifestyle ‡πÄ‡∏õ‡πá‡∏ô‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÑ‡∏£",
        "Promotion/Privilage ‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏Å‡∏±‡∏ö‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤"
    ])
